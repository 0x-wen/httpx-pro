/admin/content:
  delete:
    description: '- delete content

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: page id
      in: body
      name: page_id
      required: true
      schema:
        type: string
    - description: content id
      in: body
      name: content_id
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/content
    tags:
    - default
  get:
    description: '- query content

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: page id
      in: query
      name: page_id
      type: string
    - description: content id
      in: query
      name: content_id
      type: string
    - description: content language
      in: query
      name: language_key
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/content
    tags:
    - default
  post:
    description: '- create content'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: content info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Content'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/content
    tags:
    - default
  put:
    description: '- update content'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: content info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Content'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/content
    tags:
    - default
/admin/group:
  get:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: data id
      in: query
      name: id
      type: string
    - description: page number
      in: query
      name: page
      type: integer
    - description: page size
      in: query
      name: page_size
      type: integer
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/group
    tags:
    - default
  put:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: user info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Group'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/group
    tags:
    - default
/admin/kyc:
  get:
    description: '- swith Kyc query/update  method [get/put]

      - if method is PUT, just update kyc_data field'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Kyc'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/kyc
    tags:
    - default
  post:
    description: '- swith Kyc query/update  method [get/put]

      - if method is PUT, just update kyc_data field'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Kyc'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/kyc
    tags:
    - default
  put:
    description: '- swith Kyc query/update  method [get/put]

      - if method is PUT, just update kyc_data field'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: User info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.User'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/kyc
    tags:
    - default
/admin/language:
  delete:
    description: '- delete language'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Language key
      in: body
      name: language_key
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/language
    tags:
    - default
  get:
    description: '- query language

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Language key
      in: body
      name: language_key
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/language
    tags:
    - default
  post:
    description: '- create language'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Language
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Language'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/language
    tags:
    - default
  put:
    description: '- update language'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Language key
      in: body
      name: language_key
      required: true
      schema:
        type: string
    - description: Language name
      in: body
      name: language_name
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/language
    tags:
    - default
/admin/login:
  post:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: user info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.LoginUsers'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/login
    tags:
    - default
/admin/member:
  get:
    description: '- admin query group info

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Group id
      in: query
      name: group_id
      required: true
      type: string
    - description: page number
      in: query
      name: page
      type: integer
    - description: page size
      in: query
      name: page_size
      type: integer
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/member
    tags:
    - default
/admin/nft:
  delete:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: uuid
      in: query
      name: uuid
      required: true
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/nft
    tags:
    - default
  put:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: user info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Nft'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/nft
    tags:
    - default
/admin/page:
  delete:
    description: '- delete page

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Page id
      in: body
      name: page_id
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/page
    tags:
    - default
  get:
    description: '- query page by project id

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: project id
      in: body
      name: project_id
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/page
    tags:
    - default
  post:
    description: '- create page

      - input project id and page name'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Page
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Page'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/page
    tags:
    - default
  put:
    description: '- update page

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: page id
      in: body
      name: page_id
      required: true
      schema:
        type: string
    - description: page name
      in: body
      name: name
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/page
    tags:
    - default
/admin/project:
  delete:
    description: '- delete project'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: project id
      in: body
      name: project_id
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/project
    tags:
    - default
  get:
    description: '-  query project'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: project id
      in: body
      name: project_id
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/project
    tags:
    - default
  post:
    description: '-  create project

      -  only input token and name param'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Project
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Project'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/project
    tags:
    - default
  put:
    description: '-  update project'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: project id
      in: body
      name: project_id
      required: true
      schema:
        type: string
    - description: project name
      in: body
      name: name
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/project
    tags:
    - default
/admin/role:
  delete:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: role_id
      in: query
      name: role_id
      required: true
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/role
    tags:
    - default
  get:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: role_id
      in: query
      name: role_id
      required: true
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/role
    tags:
    - default
  post:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: role info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Role'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/role
    tags:
    - default
  put:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: user info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Role'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/role
    tags:
    - default
/admin/staff:
  delete:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: account
      in: query
      name: account
      required: true
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/staff
    tags:
    - default
  get:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/staff
    tags:
    - default
  post:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: user info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.AdminUsers'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/staff
    tags:
    - default
  put:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: user info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.AdminUsers'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For admin /admin/staff
    tags:
    - default
/normal/content:
  get:
    description: '- query content'
    parameters:
    - description: page id
      in: query
      name: page_id
      required: true
      type: string
    - description: content id
      in: query
      name: content_id
      required: true
      type: string
    - description: content language
      in: query
      name: language_key
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/content
    tags:
    - default
/normal/language:
  get:
    description: '- query language

      -'
    parameters:
    - description: Language key
      in: body
      name: language_key
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/language
    tags:
    - default
/normal/page:
  get:
    description: '- query page

      -'
    parameters:
    - description: project id
      in: body
      name: project_id
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/page
    tags:
    - default
/normal/project:
  get:
    description: '-  query project'
    parameters:
    - description: project id
      in: body
      name: project_id
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/project
    tags:
    - default
/user/createAddress:
  post:
    description: '- add user address'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: UserAddress info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.UserAddress'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/userAddress
    tags:
    - default
/user/group:
  delete:
    description: '- delete group

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Group id
      in: body
      name: group_id
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/group
    tags:
    - default
  get:
    description: '- query group'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Group id
      in: body
      name: group_id
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/group
    tags:
    - default
  post:
    description: '- create group'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Group info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Group'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/group
    tags:
    - default
/user/kyc:
  get:
    description: '- query self kyc info'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: user address
      in: body
      name: address
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Kyc'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/kyc
    tags:
    - default
/user/member:
  delete:
    description: '- user quit group

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Member info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Member'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/member
    tags:
    - default
  get:
    description: '- user query group info

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Group id
      in: query
      name: group_id
      required: true
      type: string
    - description: page number
      in: query
      name: page
      type: integer
    - description: page size
      in: query
      name: page_size
      type: integer
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/member
    tags:
    - default
  post:
    description: '- user join group

      -'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: Member info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.Member'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/member
    tags:
    - default
/user/nft:
  get:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /me_manager/staff
    tags:
    - default
  post:
    description: '-'
    parameters:
    - description: '{token}'
      in: header
      name: AuthToken
      required: true
      type: string
    - description: user info
      in: body
      name: RequestBody
      required: true
      schema:
        $ref: '#/definitions/form.NftReq'
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /me_manager/nft
    tags:
    - default
/user/sign_in:
  post:
    description: '-  sign in.'
    parameters:
    - description: email
      in: body
      name: email
      required: true
      schema:
        type: string
    - description: email code
      in: body
      name: email_code
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/sign_in
    tags:
    - default
/user/sign_up:
  post:
    description: '-  sign up'
    parameters:
    - description: email
      in: body
      name: email
      required: true
      schema:
        type: string
    produces:
    - application/json
    responses:
      '200':
        description: OK
        schema:
          $ref: '#/definitions/render.Base'
      '400':
        description: Bad Request
        schema:
          $ref: '#/definitions/models.Error'
      '401':
        description: Unauthorized
        schema:
          $ref: '#/definitions/models.Error'
    summary: For user /user/sign_up
    tags:
    - default
